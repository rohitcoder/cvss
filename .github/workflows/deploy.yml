name: Automated deploy

on:
  push:
    tags:
      - 'v*'

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      project_version: ${{ steps.project_version.outputs.value }}
      project: ${{ steps.project.outputs.value }}
    steps:
      - id: project_version
        run: |
          VERSION=${GITHUB_REF/refs\/tags\//}
          SANITIZED_VERSION=${VERSION#v}
          if ! [[ "$SANITIZED_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format: $SANITIZED_VERSION"
            exit 1
          fi
          echo ::set-output name=value::$SANITIZED_VERSION
      - id: project
        run: echo ::set-output name=value::$(echo ${GITHUB_REPOSITORY#*/} | tr A-Z a-z)

  deploy:
    runs-on: ubuntu-latest
    needs: prepare
    env:
      PROJECT: ${{ needs.prepare.outputs.project }}
      VERSION: ${{ needs.prepare.outputs.project_version }}
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GPR_TOKEN }}

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org'

      - run: node --version
      - run: npm --version

      - run: npm install -g npm@10
      - run: npm cache clean --force
      - run: npm version --no-git-tag-version "$VERSION"
      - run: npm ci -q
      - run: npm run build
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: 'https://npm.pkg.github.com'
          scope: '@rohit_coder'

      - run: node --version
      - run: npm --version
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GPR_TOKEN }}
